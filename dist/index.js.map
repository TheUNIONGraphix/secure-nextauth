{"version":3,"file":"index.js","sources":["../src/context/SecureSessionContext.ts","../src/hooks/useAuthStatus.ts","../src/provider/SecureSessionProvider.tsx","../src/utils/authHelpers.ts"],"sourcesContent":["'use client';\n\nimport { createContext, useContext } from 'react';\nimport { SecureSessionContextType } from '../types';\n\nexport const SecureSessionContext = createContext<SecureSessionContextType>({\n  isAuthenticated: false,\n});\n\nexport const useSecureSession = () => {\n  const context = useContext(SecureSessionContext);\n  if (context === undefined) {\n    throw new Error('useSecureSession must be used within a SecureSessionProvider');\n  }\n  return context;\n};\n","'use client';\n\nimport { useState, useEffect } from 'react';\nimport { AuthStatusResponse, SecureNextAuthConfig } from '../types';\n\nexport function useAuthStatus(config?: SecureNextAuthConfig) {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const endpoint = config?.authStatusEndpoint || '/api/auth/status';\n\n  const checkAuthStatus = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const response = await fetch(endpoint);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data: AuthStatusResponse = await response.json();\n      const newAuthStatus = data.isAuthenticated;\n      \n      setIsAuthenticated(newAuthStatus);\n      \n      // Call the optional callback\n      if (config?.onAuthChange) {\n        config.onAuthChange(newAuthStatus);\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to check auth status';\n      setError(errorMessage);\n      setIsAuthenticated(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    checkAuthStatus();\n  }, [endpoint]);\n\n  return {\n    isAuthenticated,\n    isLoading,\n    error,\n    refetch: checkAuthStatus,\n  };\n}\n","'use client';\n\nimport React from 'react';\nimport { SecureSessionContext } from '../context/SecureSessionContext';\nimport { SecureSessionProviderProps } from '../types';\n\nexport function SecureSessionProvider({ \n  children, \n  isAuthenticated \n}: SecureSessionProviderProps) {\n  return (\n    <SecureSessionContext.Provider value={{ isAuthenticated }}>\n      {children}\n    </SecureSessionContext.Provider>\n  );\n}\n","import { getServerSession } from 'next-auth';\nimport { NextAuthOptions } from 'next-auth';\n\n/**\n * Server-side helper to get authentication status\n * This should be used in your API route or server components\n */\nexport async function getAuthStatus(options: NextAuthOptions): Promise<boolean> {\n  try {\n    const session = await getServerSession(options);\n    return !!session?.user;\n  } catch (error) {\n    console.error('Error checking auth status:', error);\n    return false;\n  }\n}\n\n/**\n * Helper to create a standardized auth status API response\n */\nexport function createAuthStatusResponse(isAuthenticated: boolean) {\n  return {\n    isAuthenticated,\n  };\n}\n\n/**\n * Middleware helper to check if user is authenticated\n */\nexport function requireAuth(isAuthenticated: boolean, redirectUrl?: string) {\n  if (!isAuthenticated) {\n    if (redirectUrl) {\n      return {\n        redirect: {\n          destination: redirectUrl,\n          permanent: false,\n        },\n      };\n    }\n    throw new Error('Authentication required');\n  }\n  return null;\n}\n"],"names":["createContext","useContext","useState","useEffect","_jsx","getServerSession"],"mappings":"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"}