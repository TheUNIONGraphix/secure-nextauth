{"version":3,"file":"index.js","sources":["../src/context/SessionContext.tsx","../src/provider/SessionContextProvider.tsx"],"sourcesContent":["\"use client\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\ninterface SessionContextType {\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: () => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst SessionContext = createContext<SessionContextType | undefined>(undefined);\n\nexport const useSession = (): SessionContextType => {\n  const context = useContext(SessionContext);\n  if (context === undefined) {\n    throw new Error('useSession must be used within a SessionContextProvider');\n  }\n  return context;\n};\n\nexport { SessionContext };\n","\"use client\";\nimport React, { useState, useEffect } from 'react';\nimport { SessionContext } from '../context/SessionContext';\n\ninterface SessionContextProviderProps {\n  children: React.ReactNode;\n}\n\nexport function SessionContextProvider({ children }: SessionContextProviderProps) {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  // 인증 상태 확인\n  const checkAuthStatus = async () => {\n    try {\n      const response = await fetch('/api/auth/status');\n      if (response.ok) {\n        const data = await response.json();\n        setIsAuthenticated(data.isAuthenticated);\n      }\n    } catch (error) {\n      console.error('Auth status check failed:', error);\n      setIsAuthenticated(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 로그인 함수\n  const login = async () => {\n    try {\n      window.location.href = '/api/auth/signin';\n    } catch (error) {\n      console.error('Login failed:', error);\n    }\n  };\n\n  // 로그아웃 함수\n  const logout = async () => {\n    try {\n      const response = await fetch('/api/auth/signout', {\n        method: 'POST',\n      });\n      if (response.ok) {\n        setIsAuthenticated(false);\n        window.location.href = '/';\n      }\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const value = {\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n  };\n\n  return (\n    <SessionContext.Provider value={value}>\n      {children}\n    </SessionContext.Provider>\n  );\n}\n"],"names":["createContext","useContext","useState","useEffect","_jsx"],"mappings":";;;;;AAUA,MAAM,cAAc,GAAGA,mBAAa,CAAiC,SAAS,CAAC;AAExE,MAAM,UAAU,GAAG,MAAyB;AACjD,IAAA,MAAM,OAAO,GAAGC,gBAAU,CAAC,cAAc,CAAC;AAC1C,IAAA,IAAI,OAAO,KAAK,SAAS,EAAE;AACzB,QAAA,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC;;AAE5E,IAAA,OAAO,OAAO;AAChB;;ACVM,SAAU,sBAAsB,CAAC,EAAE,QAAQ,EAA+B,EAAA;IAC9E,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAGC,cAAQ,CAAU,KAAK,CAAC;IACtE,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAGA,cAAQ,CAAU,IAAI,CAAC;;AAGzD,IAAA,MAAM,eAAe,GAAG,YAAW;AACjC,QAAA,IAAI;AACF,YAAA,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,kBAAkB,CAAC;AAChD,YAAA,IAAI,QAAQ,CAAC,EAAE,EAAE;AACf,gBAAA,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE;AAClC,gBAAA,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC;;;QAE1C,OAAO,KAAK,EAAE;AACd,YAAA,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC;YACjD,kBAAkB,CAAC,KAAK,CAAC;;gBACjB;YACR,YAAY,CAAC,KAAK,CAAC;;AAEvB,KAAC;;AAGD,IAAA,MAAM,KAAK,GAAG,YAAW;AACvB,QAAA,IAAI;AACF,YAAA,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,kBAAkB;;QACzC,OAAO,KAAK,EAAE;AACd,YAAA,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC;;AAEzC,KAAC;;AAGD,IAAA,MAAM,MAAM,GAAG,YAAW;AACxB,QAAA,IAAI;AACF,YAAA,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,mBAAmB,EAAE;AAChD,gBAAA,MAAM,EAAE,MAAM;AACf,aAAA,CAAC;AACF,YAAA,IAAI,QAAQ,CAAC,EAAE,EAAE;gBACf,kBAAkB,CAAC,KAAK,CAAC;AACzB,gBAAA,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG;;;QAE5B,OAAO,KAAK,EAAE;AACd,YAAA,OAAO,CAAC,KAAK,CAAC,gBAAgB,EAAE,KAAK,CAAC;;AAE1C,KAAC;IAEDC,eAAS,CAAC,MAAK;AACb,QAAA,eAAe,EAAE;KAClB,EAAE,EAAE,CAAC;AAEN,IAAA,MAAM,KAAK,GAAG;QACZ,eAAe;QACf,SAAS;QACT,KAAK;QACL,MAAM;KACP;AAED,IAAA,QACEC,cAAA,CAAC,cAAc,CAAC,QAAQ,EAAA,EAAC,KAAK,EAAE,KAAK,EAAA,QAAA,EAClC,QAAQ,EAAA,CACe;AAE9B;;;;;"}